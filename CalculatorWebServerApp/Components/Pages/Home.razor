@page "/"
@rendermode InteractiveServer

 <div id="calculator-container">
     <div id="header">
         <h3>Calculator</h3>
         <button id="clear-btn" @onclick="ClearOperands">Clear</button>
     </div>
     
     
     <div class="result-box" style="background-color: @(resultValue.IsSuccess ? "#e9e9e9" : "red")">
         <p>@resultValue.Operation = 
         @if (resultValue.IsSuccess)
         {
             @resultValue.Value
         }
         else
         {
             @resultValue.ErrorMessage
         }
         </p>
     </div>
     
     <div id="input-section-container">
         <div class="textField-container">
             <p>Input A</p>
             <input class="textField"type="number" @bind-value="num1"/>
         </div>
         <div class="textField-container">
             <p>Input B</p>
             <input class="textField" type="number" @bind-value="num2"/>
         </div>
     </div>
     
     <div class="button-list-container">
         <div id="two-operand-btns">
             <button @onclick="PerformAddition">A + B</button>
             <button @onclick="PerformSubtraction">A - B</button>
             <button @onclick="PerformMultiplication">A * B</button>
             <button @onclick="PerformDivision">A / B</button>
         <!--<button @onclick="PerformIsEqual">==</button>-->
             <button @onclick="PerformRaiseToPower">A ^ B</button>
             <button @onclick="PerformLogOfNumber">A log B</button>
             <button @onclick="PerformRootOfNumber">A root B</button>
         </div>
         <div id="one-operand-btns">
             <button @onclick="PerformFactorial">A!</button>
             <button @onclick="PerformSine">sin(A)</button>
             <button @onclick="PerformCosine">cos(A)</button>
             <button @onclick="PerformTangent">tan(A)</button>
             <button @onclick="PerformReciprocal">1/A</button>
         </div>
     </div>
 </div>

@code {
    double num1;
    double num2;
    Result<double> resultValue = new Result<double>(0, true, "");

    private void PerformAddition() => resultValue = Calculator.Add(num1, num2);
    private void PerformSubtraction() => resultValue = Calculator.Subtract(num1, num2);
    private void PerformMultiplication() => resultValue = Calculator.Multiply(num1, num2);
    private void PerformDivision() => resultValue = Calculator.Divide(num1, num2);
    //private void PerformIsEqual() => resultValue = Calculator.IsEqual(num1, num2);
    private void PerformRaiseToPower() => resultValue = Calculator.RaiseToPower(num1, num2);
    private void PerformLogOfNumber() => resultValue = Calculator.LogOfNumber(num1, num2);
    private void PerformRootOfNumber() => resultValue = Calculator.RootOfNumber(num1, num2);
    private void PerformFactorial() => resultValue = num2 == 0 ? Calculator.Factorial(num1) : new Result<double>(false, $"{num1}! {num2}!", "Factorial is only defined for a single number");
    private void PerformSine() => resultValue = Calculator.Sine(num1);
    private void PerformCosine() => resultValue = Calculator.Cosine(num1);
    private void PerformTangent() => resultValue = Calculator.Tangent(num1);
    private void PerformReciprocal() => resultValue = Calculator.Reciprocal(num1);
    private void ClearOperands()
    {
        num1 = 0;
        num2 = 0;
        resultValue = new Result<double>(0, true, "");
    }
}